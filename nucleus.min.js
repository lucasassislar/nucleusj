function makeRandomString(e) { for (var a = "", n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", r = 0; e > r; r++) a += n.charAt(Math.floor(Math.random() * n.length)); return a } function nukeUpdateCycle() { for (var i = 0; i < __nukeTrackers.length; i++) try { var obj = __nukeTrackers[i], dataName = obj.dataName, currentData = eval(dataName), lastData = obj.value; lastData != currentData && (obj.event(currentData), obj.value = currentData) } catch (ex) { } setTimeout(nukeUpdateCycle, 100) } function async(e, a, n, r, t, i, l, s, u) { return new Async(e, a, n, r, t, i, l, s, u) } function nukeGetMoney(e) { var a = parseFloat(e); return isNaN(a) ? e : "R$" + a.toFixed(2) } function nukePost(e, a, n, r) { $.ajax({ type: "POST", url: e, data: a, success: function (e) { 0 == e.returnCode ? isnull(n) || n(e) : isnull(r) || r(e) }, error: function (e) { isnull(r) || r(e) } }) } function aPost(e, a, n, r) { return nukePost(a, n, e, r) } function nukeGet(e, a, n) { $.ajax({ type: "GET", url: e, success: function (e) { 0 == e.returnCode ? isnull(a) || a(e) : isnull(n) || n(e) }, error: function (e) { isnull(n) || n(e) } }) } function aGet(e, a, n) { return nukeGet(a, e.onSuccess, n) } function isnull(e) { return null == e || void 0 == e || "" === e } function nukeStringToBoolean(e) { if ("string" == typeof e || e instanceof String) switch (e.toLowerCase().trim()) { case "true": case "yes": case "1": return !0; case "false": case "no": case "0": case null: return !1; default: return Boolean(e) } return e } function nukeValidateEmail(e) { var a = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/; return a.test(e) } function nukeGetUrlVars() { for (var e, a = [], n = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&"), r = 0; r < n.length; r++) e = n[r].split("="), a.push(e[0]), a[e[0]] = e[1]; return a } function nukeFormatDate(e, a) { var n = e; return e instanceof Date || (n = new Date(e)), n.format(a) } function nukeParseDate(e) { var a = e.split("/"), n = a[0], r = a[1], t = a[2]; return new Date(t, r, n) } function nukeStringRemoveRepeatedChars(e) { for (var a = "", n = 0; n < e.length; n++) { var r = e[n]; -1 == a.indexOf(r) && (a += r) } return a } function nukeStringRemoveAllInstancesOff(e, a) { for (var n = "", r = 0; r < e.length; r++) { var t = e[r]; -1 == a.indexOf(t) && (n += t) } return n } function nukeRemoveMask(e, a) { var n = a.replace(/\d+/g, ""), r = nukeStringRemoveRepeatedChars(n); return nukeStringRemoveAllInstancesOff(e, r) } function nj(e) { return nukeGetCleanJQuery(e) } function nukeGetCleanJQuery(e) { if ("string" == typeof e) { 0 != e.indexOf("#") && 0 != e.indexOf(".") && (e = "#" + e); var a = $(e); return void 0 == a.length || a.length > 1 ? a : a[0] } return e instanceof jQuery ? void 0 != e.length ? e[0] : e : $(e) } function nukeGetCleanTextValue(e) { var a = nukeGetCleanJQuery(e), n = a[0].value, r = $(a).data("mask"); if (null != r) { var t = r.mask; n = nukeRemoveMask(n, t) } return n } function nukeSetUp() { nukeUpdateCycle(), __nukeOptions.clickSetRadio && $(document).on("click", ".nukeClickInput", function () { var e = $(this).parent(), a = e.find("input"); a.prop("checked", !0) }) } function nukeChangeState(e) { e = nukeStringToBoolean(e), __nukeFormState = e, e ? ($(".nukeView").each(function () { $(this).show() }), $(".nukeEdit").each(function () { $(this).hide() })) : ($(".nukeView").each(function () { $(this).hide() }), $(".nukeEdit").each(function () { $(this).show() })), $(".nukeRead").each(function () { $(this).attr("readonly", e), $(this).attr("disabled", e) }), $(".nukeReadR").each(function () { $(this).attr("readonly", !e), $(this).attr("disabled", !e) }) } function changeScriptParent(e) { var a = document.getElementsByTagName("script"); a = a[a.length - 1]; var n = a.parentNode; n.innerHTML = e } function nukeRemoveAll(e, a, n) { for (; -1 != n.indexOf(e) ;) n = n.replace(e, a); return n } function replaceAll(e, a, n) { return n.replace(new RegExp(e, "g"), a) } function nukeRefresh(parentId, self) { if (parentId = "undefined" != typeof parentId ? parentId : document, self = "undefined" != typeof self ? self : !1, void 0 != parentId.indexOf && -1 != parentId.indexOf("$")) { for (; -1 != parentId.indexOf("$") ;) parentId = parentId.replace("$", ""); var first = ""; 0 == parentId.indexOf("#") && (first = "#", parentId = parentId.substring(1, parentId.length)), parentId = eval(parentId), parentId += first } for (var parent = nukeGetCleanJQuery(parentId), divs = $(parent).find("[nuke]"), i = 0; i < divs.length; i++) { var meself = divs[i], parents = $(meself).parents(); if (0 == parents.length || "HTML" == parents[parents.length - 1].nodeName) { var att = $(meself).attr("nuke"); __nukeExecNukeString(att, meself) } } if (self) { var nk = $(parent).attr("nuke"); isnull(nk) || (void 0 != parent.length && (parent = parent[0]), __nukeExecNukeString(nk, parent)) } __nukeRanOnce = !0, nukeChangeState(__nukeFormState) } function parseNumber(e) { return parseFloat(e.replace(/[^\d.-]/g, "")) } function __nukeExecNukeString(e, a) { for (var n = e.split(","), r = 0; r < n.length; r++) { var t = n[r]; " " == t[0] && (t = t.substring(1, t.length)); var i = t.split(" "), l = i[0]; try { var s = __nukeHandlers[l]; isnull(s) || s(i, a) } catch (u) { console.log(u) } } } function nukePopulateForm(data, formId) { formId = "undefined" != typeof formId ? formId : document; var jform = nukeGetCleanJQuery(formId); for (var name in data) { var inputs = $(jform).find('[name="' + name + '"]'); if (inputs.length > 0) { var value = eval("data." + name); value instanceof Date && (value = value.format(dateMask)); for (var i = 0; i < inputs.length; i++) { var inp = inputs[i], nmask = $(inp).attr("nmask"), val = value, isAsync = !1, asyncCode = ""; if (!isnull(nmask)) { val = nmask; for (var start = 0, index = 0; index = nmask.indexOf("$", start), -1 != index;) { if (index > 0) { var bf = nmask[index - 1]; if ("R" == bf) { start = index + 1; continue } } var endIndex = nmask.indexOf("$", index + 1), word = nmask.substring(index + 1, endIndex), vat = word, valIndex = vat.indexOf("value"); -1 != valIndex && (vat = vat.replace(/value/g, value)), val = val.replace("$" + word + "$", vat), start = endIndex + 1 } var asyncInd = val.indexOf("async"); -1 != asyncInd && (isAsync = !0), isAsync ? (asyncCode = val.substring(val.lastIndexOf(")") + 1, val.length), val = val.substring(0, val.lastIndexOf(")") + 1), val = eval(val), val.code = asyncCode, val.input = inp, val.queue.push(function (data, as) { val = eval("data" + as.code), "div" == as.input.localName ? as.input.innerHTML = val : "checkbox" == as.input.type ? $(as.input).attr("checked", as.input) : as.input.value = val })) : val = eval(val) } isAsync || ("div" == inp.localName ? inp.innerHTML = val : "checkbox" == inp.type ? $(inp).attr("checked", inp) : inp.value = val) } } } } function __internalInitializeArray(id, pre) { pre = "undefined" != typeof pre ? pre : ""; var bracketInd = id.indexOf("["); if (-1 != bracketInd) { var arrayName = id.substring(0, bracketInd); if (id.lastIndexOf("'") < bracketInd) { var array = eval(pre + arrayName); isnull(array) && eval(pre + arrayName + " = []") } else try { var array = eval(pre + arrayName); isnull(array) && eval(pre + arrayName + " = {}") } catch (ex) { eval(pre + arrayName + " = {}") } } } function nukeGetFormData(formId) { formId = "undefined" != typeof formId ? formId : document; for (var data = {}, jform = $(formId), found = jform.find("input"), inputs = jform.filter("input").add(found), i = 0; i < inputs.length; i++) { var input = inputs[i]; if (input.id in nukeErrors) return !1; var id = input.id; if (!isnull(id)) { __internalInitializeArray(id, "data."); var str = ""; if ("checkbox" == input.type) str = "data." + id + " = '" + $(input).prop("checked") + "'"; else { var value = nukeGetCleanTextValue(input); if (isnull(value)) continue; str = "data." + id + " = '" + value + "'" } eval(str) } } inputs = jform.find("select"); for (var i = 0; i < inputs.length; i++) { var input = inputs[i]; if (input.id in nukeErrors) return !1; var id = input.id; if (!isnull(id)) { __internalInitializeArray(id, "data."); var value = $(input).val(); eval("data." + id + " = " + value) } } return data } function nukeRegErrorCheck_Numeric(e, a, n) { validateInput(e, a, n, function (e, a, n, r) { var t = []; return val.match(/^\d+$/) || t.push("numeric"), e.length >= n && t.push("small"), e.length < r && t.push("big"), t }) } function nukeRegErrorCheck_Text(e, a, n) { validateInput(e, a, n, function (e, a, n, r) { var t = []; return e.length >= n && t.push("small"), e.length < r && t.push("big"), t }) } function nukeRegErrorCheck_Email(e, a, n) { validateInput(e, a, n, function (e, a, n, r) { var t = []; return nukeValidateEmail(e) || t.push("email"), e.length >= n && t.push("small"), e.length < r && t.push("big"), t }) } function validateInput(e, a, n, r) { a = "undefined" != typeof a ? a : 0, n = "undefined" != typeof a ? n : 99999, $(document).on("input", e, function () { var t = nukeGetCleanTextValue(e), i = $(e).parent(), l = e + "_erro", s = $(l)[0], u = r(t, i, a, n); 0 == u.length ? (null != s && s.html(""), i.removeClass("has-error"), delete nukeErrors[e]) : (null != s && (s.innerHTML = getErrorMsg(u)), i.addClass("has-error"), nukeErrors.push(e)) }) } function getErrorMsg(e) { var a = ""; e.contains("email") && (a += ",Texto digitado não é um email"), e.contains("numeric") && (a += ",Letras não são permitidas"), e.contains("small") && (a += ",Texto digitado é pequeno demais"), e.contains("big") && (a += ",Texto digitado é muito grande"), 0 == a.indexOf(",") && (a = a.substring(1)); var n = a.lastIndexOf(","); return 0 != n && a.replaceAt(n, " e"), a } function arrayNForeach(e, a) { for (var n = null, r = 0; r < e.length; r++) { var t = e[r]; if (r != e.length - 1) var i = e[r + 1]; var l = a(r, t, n, i); e[r] = l, n = l } } function fibonacciArray(e) { arrayNForeach(e, function (e, a, n) { return null != n ? n + a : a }) } function arrayPresence(array, varName) { for (var newArr = {}, i = 0; i < array.length; i++) { var obj = array[i], data = eval("obj." + varName); eval("newArr." + data + " = true") } return newArr } function arrayIndexBy(array, varName) { for (var newArr = {}, i = 0; i < array.length; i++) { var obj = array[i], data = eval("obj." + varName); eval('newArr["' + data + '"]  = obj') } return newArr } function arrayfyProperty(array, varName) { var variable; if (-1 == varName.indexOf(",")) variable = [varName]; else { variable = varName.split(","); for (var i = 0; i < variable.length; i++) variable[i] = variable.replace(/ /g, "") } for (var newArr = [], i = 0; i < array.length; i++) for (var obj = array[i], j = 0; j < variable.length; j++) { var data = eval("obj." + variable[j]); 1 == variable.length ? newArr[i] = data : eval("newArr[i]." + variable[j] + " = data") } return newArr } function arrayfyObject(e) { var a = [], n = 0; for (var r in e) if (e.hasOwnProperty(r)) { var t = e[r]; a[n] = t, n++ } return a } function destroyTable(e) { var a = nukeGetCleanJQuery(e), n = $(a).dataTable(); $.fn.dataTable.isDataTable(a) && n.fnDestroy() } var cpfMask = "999.999.999-99", dateMask = "dd/mm/yyyy", __nukeLocker = !1, nukeErrors = [], __nukeFormState = !1, Async = function (e, a, n, r, t, i, l, s, u) { var o = {}; return o.code = "", o.func = e, o.onSuccess = function (e) { this.data = e; for (var a = 0; a < o.queue.length; a++) o.queue[a](e, o) }, o.get = function () { return data }, o.queue = [], o.func(o, a, n, r, t, i, l, s, u), o }; String.prototype.replaceAt = function (e, a) { return this.substr(0, e) + a + this.substr(e + a.length) }; var __nukeRanOnce, __nukeDict = [], __nukeOptions = {}; __nukeOptions.clickSetRadio = !0; var __nukeHandlers = {}, __nukeSupressLogs = !1; __nukeHandlers.foreach = function (words, parent) { var meself = $(parent), arrayName = words[1], myId = meself.attr("id"); isnull(myId) && (myId = makeRandomString(10), meself.attr("id", myId)); var html; __nukeRanOnce ? (html = __nukeDict[myId], isnull(html) && (html = parent.innerHTML, __nukeDict[myId] = html)) : (html = parent.innerHTML, __nukeDict[myId] = html), parent.innerHTML = ""; var array; try { array = eval(arrayName) } catch (ex) { return } for (__nukeSupressLogs || array instanceof String && console.log("Data provided is not an array. Its a string. Did you intend to loop a String?"), void 0 == array.length, i = 0; i < array.length; i++) { for (var element = array[i], thtml = html, start = 0, index = 0; index = thtml.indexOf("$", start), -1 != index;) { if (index > 0) { var bf = thtml[index - 1]; if ("R" == bf) { start = index + 1; continue } } var endIndex = thtml.indexOf("$", index + 1); if (-1 == endIndex) break; var word = thtml.substring(index + 1, endIndex), isNukeBlock = !1, nIndex = thtml.lastIndexOf('"', index); if (nIndex > 5) { var nWords = thtml.substring(nIndex - 5, nIndex); "nuke=" == nWords && (isNukeBlock = !0) } var value = word; if (value = -1 != word.indexOf("__index") ? value.replace("__index", i) : -1 != value.indexOf("@") ? value.replace(/@/g, arrayName + "[" + i + "].") : arrayName + "[" + i + "]." + value, -1 != value.indexOf("async") ? (asyncCode = value.substring(value.lastIndexOf(")") + 1, value.length), value = value.substring(0, value.lastIndexOf(")") + 1), value = eval(value), value.code = asyncCode, value.key = makeRandomString(10), value.div = "<div id=" + value.key + "></div>", value.queue.push(function (data, as) { value = eval("data" + as.code); var inp = $("#" + as.key); inp[0].outerHTML = value }), value = value.div) : isNukeBlock || (value = eval(value)), isNukeBlock) { var ni = index + value.length + 2; start = ni, thtml = thtml.replace("$" + word + "$", "$" + value + "$") } else thtml = thtml.replace("$" + word + "$", value) } meself.append(thtml) } nukeRefresh(meself) }, __nukeHandlers.exists = function (words, parent) { var meself = $(parent), js = words[1]; -1 != js.indexOf("isReadOnly") && (js = js.replace("isReadOnly", __nukeFormState)); var doExist = eval(js); doExist || meself.remove() }, __nukeHandlers.select = function (words, parent) { var meself = $(parent), arrayName = words[1], name = words[2], indexName = null, selected = null; words.length > 3 && (indexName = words[3], words.length > 4 && (selected = words[4])); var varName = null; if (-1 != arrayName.indexOf(".")) { var split = arrayName.split("."); arrayName = split[0], varName = split[1] } var array; try { array = eval(arrayName) } catch (ex) { return void console.log(ex) } __nukeSupressLogs || array instanceof String && console.log("Data provided is not an array. Its a string. Did you intend to loop a String?"), selected = nukeRemoveAll("$", "", selected), selected = eval(selected); for (var html = "", classes = $(meself).attr("class"), nukeCmds = $(meself).attr("nuke"), splot = nukeCmds.split(","), allNuke = "", first = !1, i = 0; i < splot.length; i++) { var s = splot[i]; " " == s[0] && (s = s.substring(1, s.length)), 0 != s.indexOf("select") && (first && (allNuke += ","), first = !0, allNuke += s) } html = "#" == name[0] ? '<select nuke="' + allNuke + '"  class="' + classes + '" id="' + name + '">' : '<select nuke="' + allNuke + '"  class="' + classes + '" name="' + name + '">'; var i = 0; for (var arr in array) { var obj = array[arr], index = i; isnull(indexName) || (index = eval("obj." + indexName)), isnull(arrayName) || (obj = eval("obj." + varName)), html += selected == index ? '<option selected="selected" value="' + index + '" >' + obj + "</option>" : '<option value="' + index + '" >' + obj + "</option>", i++ } html += "</select>", parent.outerHTML = html }, __nukeHandlers.populate = function (words, parent) { for (var meself = $(parent), dataName = words[1]; -1 != dataName.indexOf("$") ;) dataName = dataName.replace("$", ""); var data; try { data = eval(dataName) } catch (ex) { return void console.log(ex) } var trackerObj = {}; trackerObj.dataName = dataName, trackerObj.value = data, __nukeTrackers.push(trackerObj), words.length > 2 ? (nukePopulateForm(data, words[2]), trackerObj.event = function (e) { nukePopulateForm(e, words[2]) }) : (nukePopulateForm(data, meself), trackerObj.event = function (e) { nukePopulateForm(e, meself) }) }; var __nukeHandlersChange = [], __nukeTrackers = []; __nukeHandlers.event = function () { }, $(document).on("change", "[nuke]", function (ev) { var att = $(ev.target).attr("nuke"); if (!isnull(att) || (att = $(this).attr("nuke"), !isnull(att))) for (var nukeCmds = att.split(","), i = 0; i < nukeCmds.length; i++) { var str = nukeCmds[i], spllited = str.split(" "), word = spllited[0]; if ("value" == word) { for (var rest = str.substring(word.length, str.length) ; -1 != rest.indexOf("$") ;) rest = rest.replace("$", ""); __internalInitializeArray(rest); var val; val = "checkbox" == ev.target.type ? ev.target.checked : ev.target.value, eval(rest + " = val") } else if ("checkbox" == word) { if (__nukeLocker) return; __nukeLocker = !0; var checkBoxSel = spllited[1], selector = nukeGetCleanJQuery(checkBoxSel); $(selector).prop("checked", this.checked).change(); for (var classes = this.className.split(/\s+/), i = 0; i < classes.length; i++) { var classSelector = $(nukeGetCleanJQuery("." + classes[i])); $(classSelector).prop("checked", this.checked) } if (spllited.length > 2) { var eventName = spllited[2]; eval(eventName + "()") } __nukeLocker = !1 } else if ("event" == word) { var eventName = spllited[1]; if ("change" == eventName) { var command = spllited[2]; if ("redo" == command) { var cmdId = spllited[3]; nukeRefresh(cmdId, !0) } } } } }), Array.prototype.presence = function (e) { return arrayPresence(this, e) }, Array.prototype.indexBy = function (e) { return arrayIndexBy(this, e) }, Array.prototype.arrafyProperty = function (e) { return arrayfyProperty(this, e) }; var dateFormat = function () { var e = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g, a = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g, n = /[^-+\dA-Z]/g, r = function (e, a) { for (e = String(e), a = a || 2; e.length < a;) e = "0" + e; return e }; return function (t, i, l) { var s = dateFormat; if (1 != arguments.length || "[object String]" != Object.prototype.toString.call(t) || /\d/.test(t) || (i = t, t = void 0), t = t ? new Date(t) : new Date, isNaN(t)) throw SyntaxError("invalid date"); i = String(s.masks[i] || i || s.masks["default"]), "UTC:" == i.slice(0, 4) && (i = i.slice(4), l = !0); var u = l ? "getUTC" : "get", o = t[u + "Date"](), d = t[u + "Day"](), c = t[u + "Month"](), v = t[u + "FullYear"](), f = t[u + "Hours"](), m = t[u + "Minutes"](), p = t[u + "Seconds"](), y = t[u + "Milliseconds"](), h = l ? 0 : t.getTimezoneOffset(), k = { d: o, dd: r(o), ddd: s.i18n.dayNames[d], dddd: s.i18n.dayNames[d + 7], m: c + 1, mm: r(c + 1), mmm: s.i18n.monthNames[c], mmmm: s.i18n.monthNames[c + 12], yy: String(v).slice(2), yyyy: v, h: f % 12 || 12, hh: r(f % 12 || 12), H: f, HH: r(f), M: m, MM: r(m), s: p, ss: r(p), l: r(y, 3), L: r(y > 99 ? Math.round(y / 10) : y), t: 12 > f ? "a" : "p", tt: 12 > f ? "am" : "pm", T: 12 > f ? "A" : "P", TT: 12 > f ? "AM" : "PM", Z: l ? "UTC" : (String(t).match(a) || [""]).pop().replace(n, ""), o: (h > 0 ? "-" : "+") + r(100 * Math.floor(Math.abs(h) / 60) + Math.abs(h) % 60, 4), S: ["th", "st", "nd", "rd"][o % 10 > 3 ? 0 : (o % 100 - o % 10 != 10) * o % 10] }; return i.replace(e, function (e) { return e in k ? k[e] : e.slice(1, e.length - 1) }) } }(); dateFormat.masks = { "default": "ddd mmm dd yyyy HH:MM:ss", shortDate: "m/d/yy", mediumDate: "mmm d, yyyy", longDate: "mmmm d, yyyy", fullDate: "dddd, mmmm d, yyyy", shortTime: "h:MM TT", mediumTime: "h:MM:ss TT", longTime: "h:MM:ss TT Z", isoDate: "yyyy-mm-dd", isoTime: "HH:MM:ss", isoDateTime: "yyyy-mm-dd'T'HH:MM:ss", isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'" }, dateFormat.i18n = { dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, Date.prototype.format = function (e, a) { return dateFormat(this, e, a) };